package com.linkedin.multipart;

import com.linkedin.r2.message.rest.StreamRequest;
import com.linkedin.r2.message.rest.StreamRequestBuilder;
import java.net.URI;
import java.util.List;
import java.util.Map;


/**
 * Created by kvidhani on 6/2/15.
 */
public final class MultiPartMIMEStreamRequestBuilder {

  private final String _mimeType;
  private final Map<String, String> _contentTypeParameters;
  private final MultiPartMIMEWriter _writer;
  private final String _boundary;
   final StreamRequestBuilder _streamRequestBuilder;

  //Java docs should mention this should be a valid mime type
  //Also note that in Javadocs, contentTypeParameters should not include the boundary as its already
  //generated by the Writer
  public MultiPartMIMEStreamRequestBuilder(final URI uri, final String mimeType,
      final MultiPartMIMEWriter writer, final Map<String, String> contentTypeParameters) {
    _mimeType = mimeType.trim();
    _writer = writer;
    _boundary = writer.getBoundary();
    _contentTypeParameters = contentTypeParameters;
    _streamRequestBuilder = new StreamRequestBuilder(uri);
  }

  //If the client manually placed a content type header, this will override it
  public StreamRequest build() {
    final String contentTypeHeader = MultiPartMIMEUtils
        .buildMIMEContentTypeHeader(_mimeType, _boundary, _contentTypeParameters);
    _streamRequestBuilder.addHeaderValue(MultiPartMIMEUtils.CONTENT_TYPE_HEADER, contentTypeHeader);
    return _streamRequestBuilder.build(_writer.getEntityStream());
  }

  public StreamRequest buildCanonical() {
    final String contentTypeHeader = MultiPartMIMEUtils.buildMIMEContentTypeHeader(_mimeType, _boundary,
        _contentTypeParameters);
    _streamRequestBuilder.addHeaderValue(MultiPartMIMEUtils.CONTENT_TYPE_HEADER, contentTypeHeader);
    return _streamRequestBuilder.buildCanonical(_writer.getEntityStream());
  }

  public URI getURI() {
    return _streamRequestBuilder.getURI();
  }

  public MultiPartMIMEStreamRequestBuilder setURI(final URI uri) {
    _streamRequestBuilder.setURI(uri);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder setMethod(final String method) {
    _streamRequestBuilder.setMethod(method);
    return this;
  }

  public String getMethod() {
    return _streamRequestBuilder.getMethod();
  }

  public MultiPartMIMEStreamRequestBuilder setHeaders(final Map<String, String> headers) {
    _streamRequestBuilder.setHeaders(headers);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder setHeader(final String name, final String value) {
    _streamRequestBuilder.setHeader(name, value);
    return this;
  }
  
  public MultiPartMIMEStreamRequestBuilder addHeaderValue(final String name, final String value) {
    _streamRequestBuilder.addHeaderValue(name, value);
    return this;
  }
  
  public MultiPartMIMEStreamRequestBuilder overwriteHeaders(final Map<String, String> headers) {
    _streamRequestBuilder.overwriteHeaders(headers);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder addCookie(final String cookie) {
    _streamRequestBuilder.addCookie(cookie);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder setCookies(final List<String> cookies) {
    _streamRequestBuilder.setCookies(cookies);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder clearHeaders()
  {
    _streamRequestBuilder.clearHeaders();
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder clearCookies() {
    _streamRequestBuilder.clearCookies();
    return this;
  }

  public Map<String, String> getHeaders() {
    return _streamRequestBuilder.getHeaders();
  }

  public List<String> getCookies() {
    return _streamRequestBuilder.getCookies();
  }

  public String getHeader(final String name) {
    return _streamRequestBuilder.getHeader(name);
  }

  public List<String> getHeaderValues(final String name) {
    return _streamRequestBuilder.getHeaderValues(name);
  }

  public MultiPartMIMEStreamRequestBuilder unsafeSetHeader(final String name, final String value) {
    _streamRequestBuilder.unsafeSetHeader(name, value);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder unsafeAddHeaderValue(final String name, final String value) {
    _streamRequestBuilder.unsafeAddHeaderValue(name, value);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder unsafeSetHeaders(final Map<String, String> headers) {
    _streamRequestBuilder.unsafeSetHeaders(headers);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder unsafeOverwriteHeaders(final Map<String, String> headers) {
    _streamRequestBuilder.unsafeOverwriteHeaders(headers);
    return this;
  }
}