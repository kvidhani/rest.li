package com.linkedin.multipart.writer;

import com.linkedin.r2.message.rest.Request;
import com.linkedin.r2.message.rest.StreamRequest;
import com.linkedin.r2.message.rest.StreamRequestBuilder;
import com.linkedin.r2.message.streaming.EntityStream;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Created by kvidhani on 6/2/15.
 */
public final class MultiPartMIMEStreamRequestBuilder {
  public static final String CONTENT_TYPE_HEADER = "Content-Type";
  public static final String MULTIPART_PREFIX = "multipart/";
  public static final String BOUNDARY_PARAMETER = "boundary";

  private final URI _uri;
  private final String _contentType;
  private final Map<String, String> _headers;
  private final MultiPartMIMEWriter _writer;
  private final String _boundary;
  private final StreamRequestBuilder _streamRequestBuilder;

  //Java docs should mention this should be a valid mime type
  //Also note that in Javadocs, contentTypeParameters should not include the boundary as its already
  //generated by the Writer
  public MultiPartMIMEStreamRequestBuilder(final URI uri, final String mimeType, final Map<String, String> headers,
      final MultiPartMIMEWriter writer, final Map<String, String> contentTypeParameters) {
    _uri = uri;
    _contentType = mimeType;
    _headers = new HashMap<String, String>(headers);
    _writer = writer;
    _boundary = writer.getBoundary();

    final StringBuilder contentTypeBuilder = new StringBuilder();
    contentTypeBuilder.append(MULTIPART_PREFIX).append(mimeType.trim());
    //As per the RFC, parameters of the Content-Type header are separated by semi colons
    contentTypeBuilder.append("; ").append(BOUNDARY_PARAMETER).append("=").append(_boundary);

    for (final Map.Entry<String, String> parameter : contentTypeParameters.entrySet()) {
      if(!parameter.getKey().trim().equalsIgnoreCase(BOUNDARY_PARAMETER)) { //Note we ignore the provided boundary parameter
        contentTypeBuilder.append("; ").append(parameter.getKey().trim()).append("=")
            .append(parameter.getValue().trim());
      }
    }
    _headers.put(CONTENT_TYPE_HEADER, contentTypeBuilder.toString());
    _streamRequestBuilder = new StreamRequestBuilder(uri);
  }

  //Delegate methods. Note that we forbid setting of headers like StreamRequestBuilder typically does
  //because we may lose the Content-Type header.
  public StreamRequest build() {
    return _streamRequestBuilder.build(_writer.getEntityStream());
  }

  public StreamRequest buildCanonical() {
    return _streamRequestBuilder.buildCanonical(_writer.getEntityStream());
  }

  public URI getURI() {
    return _streamRequestBuilder.getURI();
  }

  public MultiPartMIMEStreamRequestBuilder setURI(final URI uri) {
    _streamRequestBuilder.setURI(uri);
    return this;
  }

  public MultiPartMIMEStreamRequestBuilder setMethod(final String method) {
    _streamRequestBuilder.setMethod(method);
    return this;
  }

  public String getMethod() {
    return _streamRequestBuilder.getMethod();
  }
  
  public MultiPartMIMEStreamRequestBuilder setHeader(final String name, final String value) {
    _streamRequestBuilder.setHeader(name, value);
    return this;
  }
  
  public MultiPartMIMEStreamRequestBuilder addHeaderValue(String name, String value) {
    return super.addHeaderValue(name, value);
  }
  
  public MultiPartMIMEStreamRequestBuilder overwriteHeaders(Map<String, String> headers) {
    return super.overwriteHeaders(headers);
  }

  public MultiPartMIMEStreamRequestBuilder addCookie(String cookie) {
    return super.addCookie(cookie);
  }

  public MultiPartMIMEStreamRequestBuilder setCookies(List<String> cookies) {
    return super.setCookies(cookies);
  }

  public MultiPartMIMEStreamRequestBuilder clearHeaders() {
    return super.clearHeaders();
  }

  public MultiPartMIMEStreamRequestBuilder clearCookies() {
    return super.clearCookies();
  }

  public Map<String, String> getHeaders() {
    return super.getHeaders();
  }

  public List<String> getCookies() {
    return super.getCookies();
  }

  public String getHeader(String name) {
    return super.getHeader(name);
  }

  public List<String> getHeaderValues(String name) {
    return super.getHeaderValues(name);
  }

  public MultiPartMIMEStreamRequestBuilder unsafeSetHeader(String name, String value) {
    return super.unsafeSetHeader(name, value);
  }

  public MultiPartMIMEStreamRequestBuilder unsafeAddHeaderValue(String name, String value) {
    return super.unsafeAddHeaderValue(name, value);
  }

  public MultiPartMIMEStreamRequestBuilder unsafeSetHeaders(Map<String, String> headers) {
    return super.unsafeSetHeaders(headers);
  }

  public MultiPartMIMEStreamRequestBuilder unsafeOverwriteHeaders(Map<String, String> headers) {
    return super.unsafeOverwriteHeaders(headers);
  }


}
