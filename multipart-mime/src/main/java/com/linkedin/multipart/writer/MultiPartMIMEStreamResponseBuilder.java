package com.linkedin.multipart.writer;

import com.linkedin.multipart.MultiPartMIMEUtils;
import com.linkedin.r2.message.rest.StreamResponse;
import com.linkedin.r2.message.rest.StreamResponseBuilder;
import java.util.List;
import java.util.Map;


/**
 * Created by kvidhani on 6/3/15.
 */
public class MultiPartMIMEStreamResponseBuilder {

  private final String _mimeType;
  private final Map<String, String> _contentTypeParameters;
  private final MultiPartMIMEWriter _writer;
  private final String _boundary;
  private final StreamResponseBuilder _streamResponseBuilder;

  //Java docs should mention this should be a valid mime type
  //Also note that in Javadocs, contentTypeParameters should not include the boundary as its already
  //generated by the Writer
  public MultiPartMIMEStreamResponseBuilder(final String mimeType,
      final MultiPartMIMEWriter writer, final Map<String, String> contentTypeParameters) {
    _mimeType = mimeType.trim();
    _writer = writer;
    _boundary = writer.getBoundary();
    _contentTypeParameters = contentTypeParameters;
    _streamResponseBuilder = new StreamResponseBuilder();
  }

  //Delegate
  public StreamResponse build() {
    final String contentTypeHeader = MultiPartMIMEUtils
        .buildContentTypeHeader(_mimeType, _boundary, _contentTypeParameters);
    _streamResponseBuilder.addHeaderValue(MultiPartMIMEUtils.CONTENT_TYPE_HEADER, contentTypeHeader);
    return _streamResponseBuilder.build(_writer.getEntityStream());
  }

  public StreamResponse buildCanonical() {
    final String contentTypeHeader = MultiPartMIMEUtils.buildContentTypeHeader(_mimeType, _boundary, _contentTypeParameters);
    _streamResponseBuilder.addHeaderValue(MultiPartMIMEUtils.CONTENT_TYPE_HEADER, contentTypeHeader);
    return _streamResponseBuilder.buildCanonical(_writer.getEntityStream());
  }

  public MultiPartMIMEStreamResponseBuilder setStatus(final int status)
  {
    _streamResponseBuilder.setStatus(status);
    return this;
  }
  
  public int getStatus()
  {
    return _streamResponseBuilder.getStatus();
  }

  public MultiPartMIMEStreamResponseBuilder setHeaders(final Map<String, String> headers) {
    _streamResponseBuilder.setHeaders(headers);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder setHeader(final String name, final String value) {
    _streamResponseBuilder.setHeader(name, value);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder addHeaderValue(final String name, final String value) {
    _streamResponseBuilder.addHeaderValue(name, value);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder overwriteHeaders(final Map<String, String> headers) {
    _streamResponseBuilder.overwriteHeaders(headers);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder addCookie(final String cookie) {
    _streamResponseBuilder.addCookie(cookie);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder setCookies(final List<String> cookies) {
    _streamResponseBuilder.setCookies(cookies);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder clearHeaders() {
    _streamResponseBuilder.clearHeaders();
    return this;
  }
  
  public MultiPartMIMEStreamResponseBuilder clearCookies() {
    _streamResponseBuilder.clearCookies();
    return this;
  }
  
  public Map<String, String> getHeaders() {
    return _streamResponseBuilder.getHeaders();
  }
  
  public List<String> getCookies() {
    return _streamResponseBuilder.getCookies();
  }
  
  public String getHeader(final String name) {
    return _streamResponseBuilder.getHeader(name);
  }

  public List<String> getHeaderValues(final String name) {
    return _streamResponseBuilder.getHeaderValues(name);
  }

  public MultiPartMIMEStreamResponseBuilder unsafeSetHeader(final String name, final String value) {
    _streamResponseBuilder.unsafeSetHeader(name, value);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder unsafeAddHeaderValue(final String name, final String value) {
    _streamResponseBuilder.unsafeAddHeaderValue(name, value);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder unsafeSetHeaders(final Map<String, String> headers) {
    _streamResponseBuilder.unsafeSetHeaders(headers);
    return this;
  }

  public MultiPartMIMEStreamResponseBuilder unsafeOverwriteHeaders(final Map<String, String> headers) {
    _streamResponseBuilder.unsafeOverwriteHeaders(headers);
    return this;
  }
}
